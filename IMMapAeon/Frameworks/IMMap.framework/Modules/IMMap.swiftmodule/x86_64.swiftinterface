// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IMMap
import Alamofire
import AlamofireImage
import BZipCompression
import CoreData
import CoreGraphics
import CoreLocation
import DACircularProgress
import EasyTipView
import Foundation
import Kingfisher
import Light_Untar
import MBProgressHUD
import MapKit
import PINCache
import QuartzCore
import Rswift
import RxCocoa
import RxSwift
import SafariServices
import Swift
import SwiftEntryKit
import SwiftyJSON
import UIKit
@objc public class DataManagement : ObjectiveC.NSObject {
  @objc public static let shared: IMMap.DataManagement
  @objc public func setLanguageCode(_ code: Swift.String?)
  public func setLengthUnit(_ unit: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ParkingInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc public protocol IMMapViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func imMapViewControllerWillClose(_ imMapViewController: IMMap.IMMapViewController)
  @objc func imMapViewController(_ imMapViewController: IMMap.IMMapViewController, willShare link: Swift.String)
}
@objc public class IMMapViewController : UIKit.UIViewController {
  @objc public var delegate: IMMap.IMMapViewControllerDelegate?
  @objc public var isAlwaysOpenSearchView: Swift.Bool
  @objc public class func mapViewController() -> IMMap.IMMapViewController?
  @objc public class func mapViewController(withMallId mallId: Swift.Int, isParkingHilight: Swift.Bool = false) -> IMMap.IMMapViewController?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc public func checkToOpenAirportList()
  public func openRouteViewController(withOrigin originPointId: Swift.String?, andDestination destinationPointID: Swift.String?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension IMMapViewController : MapKit.MKMapViewDelegate {
  @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, regionDidChangeAnimated animated: Swift.Bool)
  @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, rendererFor overlay: MapKit.MKOverlay) -> MapKit.MKOverlayRenderer
  @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, viewFor annotation: MapKit.MKAnnotation) -> MapKit.MKAnnotationView?
  @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, didSelect view: MapKit.MKAnnotationView)
}
extension IMMapViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension IMMapViewController : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
}
extension IMMapViewController : CoreData.NSFetchedResultsControllerDelegate {
  @objc dynamic public func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
}
extension ParkingInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<IMMap.ParkingInfo>
  @objc @NSManaged dynamic public var available: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var colorHexString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var coordinates: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parkingId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var total: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var venueId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var poiId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isQREnable: Swift.Bool {
    @objc get
    @objc set
  }
}
extension StringResource {
  public func localized() -> Swift.String
}
